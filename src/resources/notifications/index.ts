/**
 *  ! Autogenerated code !
 *  Do not make changes to this file.
 *  Changes may be overwritten as part of auto-generation.
 */

import { BaseResource, PathParameters, QueryParameters } from '../../internal/base';
import { Notification, NotificationCollection, NotificationLogCollection, ReplayNotification } from '../../entities';
import { type ListNotificationLogQueryParameters, type ListNotificationQueryParameters } from './operations';
import { type ErrorResponse, type Response } from '../../internal';
import { type INotificationResponse, type IReplayNotificationResponse } from '../../types';

const NotificationPaths = {
  list: '/notifications',
  get: '/notifications/{notification_id}',
  getLogs: '/notifications/{notification_id}/logs',
  replay: '/notifications/{notification_id}/replay',
} as const;

export * from './operations';

export class NotificationsResource extends BaseResource {
  public list(queryParams?: ListNotificationQueryParameters): NotificationCollection {
    const queryParameters = new QueryParameters(queryParams);
    return new NotificationCollection(this.client, NotificationPaths.list + queryParameters.toQueryString());
  }

  public async get(notificationId: string): Promise<Notification> {
    const urlWithPathParams = new PathParameters(NotificationPaths.get, {
      notification_id: notificationId,
    }).deriveUrl();

    const response = await this.client.get<undefined, Response<INotificationResponse> | ErrorResponse>(
      urlWithPathParams,
    );

    const data = this.handleResponse<INotificationResponse>(response);

    return new Notification(data);
  }

  public async replay(notificationId: string): Promise<ReplayNotification> {
    const urlWithPathParams = new PathParameters(NotificationPaths.replay, {
      notification_id: notificationId,
    }).deriveUrl();

    const response = await this.client.post<undefined, Response<IReplayNotificationResponse> | ErrorResponse>(
      urlWithPathParams,
      undefined,
    );

    const data = this.handleResponse<IReplayNotificationResponse>(response);

    return new ReplayNotification(data);
  }

  public getLogs(notificationId: string, queryParams?: ListNotificationLogQueryParameters): NotificationLogCollection {
    const queryParameters = new QueryParameters(queryParams);
    const urlWithPathParams = new PathParameters(NotificationPaths.getLogs, {
      notification_id: notificationId,
    }).deriveUrl();

    return new NotificationLogCollection(this.client, urlWithPathParams + queryParameters.toQueryString());
  }
}
